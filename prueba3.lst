CCS PCM C Compiler, Version 5.015, 5967               28-nov.-20 00:26

               Filename:   C:\Users\SNK93\OneDrive\Escritorio\Ultrasonido\prueba3.lst

               ROM used:   1173 words (14%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           37 (10%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   466
0003:  NOP
....................  
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
....................  
....................   
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 55,36
0005:  DATA 74,39
0006:  DATA E1,39
0007:  DATA 6F,37
0008:  DATA E9,31
0009:  DATA 6F,00
000A:  DATA 0A,22
000B:  DATA E9,39
000C:  DATA 74,1D
000D:  DATA A0,12
000E:  DATA 31,17
000F:  DATA 32,33
0010:  DATA A0,31
0011:  DATA 6D,00
*
016B:  MOVF   0B,W
016C:  MOVWF  26
016D:  BCF    0B.7
016E:  BSF    03.5
016F:  BSF    03.6
0170:  BSF    0C.7
0171:  BSF    0C.0
0172:  NOP
0173:  NOP
0174:  BCF    03.5
0175:  BCF    03.6
0176:  BTFSC  26.7
0177:  BSF    0B.7
0178:  BSF    03.6
0179:  MOVF   0C,W
017A:  ANDLW  7F
017B:  BTFSC  03.2
017C:  GOTO   1BF
017D:  BCF    03.6
017E:  MOVWF  26
017F:  BSF    03.6
0180:  MOVF   0D,W
0181:  BCF    03.6
0182:  MOVWF  27
0183:  BSF    03.6
0184:  MOVF   0F,W
0185:  BCF    03.6
0186:  MOVWF  28
0187:  MOVF   26,W
0188:  MOVWF  33
0189:  CALL   13F
018A:  MOVF   27,W
018B:  BSF    03.6
018C:  MOVWF  0D
018D:  BCF    03.6
018E:  MOVF   28,W
018F:  BSF    03.6
0190:  MOVWF  0F
0191:  BCF    03.6
0192:  MOVF   0B,W
0193:  MOVWF  29
0194:  BCF    0B.7
0195:  BSF    03.5
0196:  BSF    03.6
0197:  BSF    0C.7
0198:  BSF    0C.0
0199:  NOP
019A:  NOP
019B:  BCF    03.5
019C:  BCF    03.6
019D:  BTFSC  29.7
019E:  BSF    0B.7
019F:  BSF    03.6
01A0:  RLF    0C,W
01A1:  RLF    0E,W
01A2:  ANDLW  7F
01A3:  BTFSC  03.2
01A4:  GOTO   1BF
01A5:  BCF    03.6
01A6:  MOVWF  26
01A7:  BSF    03.6
01A8:  MOVF   0D,W
01A9:  BCF    03.6
01AA:  MOVWF  27
01AB:  BSF    03.6
01AC:  MOVF   0F,W
01AD:  BCF    03.6
01AE:  MOVWF  28
01AF:  MOVF   26,W
01B0:  MOVWF  33
01B1:  CALL   13F
01B2:  MOVF   27,W
01B3:  BSF    03.6
01B4:  MOVWF  0D
01B5:  BCF    03.6
01B6:  MOVF   28,W
01B7:  BSF    03.6
01B8:  MOVWF  0F
01B9:  INCF   0D,F
01BA:  BTFSC  03.2
01BB:  INCF   0F,F
01BC:  BCF    03.6
01BD:  GOTO   16B
01BE:  BSF    03.6
01BF:  BCF    03.6
01C0:  BCF    0A.3
01C1:  BCF    0A.4
01C2:  GOTO   480 (RETURN)
01C3:  MOVF   33,W
01C4:  BTFSC  03.2
01C5:  GOTO   233
01C6:  MOVWF  3B
01C7:  MOVF   37,W
01C8:  BTFSC  03.2
01C9:  GOTO   233
01CA:  ADDWF  3B,F
01CB:  BTFSC  03.0
01CC:  GOTO   1D4
01CD:  MOVLW  7F
01CE:  SUBWF  3B,F
01CF:  BTFSS  03.0
01D0:  GOTO   233
01D1:  BTFSC  03.2
01D2:  GOTO   233
01D3:  GOTO   1D8
01D4:  MOVLW  81
01D5:  ADDWF  3B,F
01D6:  BTFSC  03.0
01D7:  GOTO   233
01D8:  MOVF   3B,W
01D9:  MOVWF  77
01DA:  CLRF   78
01DB:  CLRF   79
01DC:  CLRF   7A
01DD:  MOVF   34,W
01DE:  MOVWF  3F
01DF:  BSF    3F.7
01E0:  MOVF   35,W
01E1:  MOVWF  3E
01E2:  MOVF   36,W
01E3:  MOVWF  3D
01E4:  MOVLW  18
01E5:  MOVWF  3B
01E6:  CLRF   3C
01E7:  BTFSS  3D.0
01E8:  GOTO   201
01E9:  MOVF   3A,W
01EA:  ADDWF  7A,F
01EB:  BTFSS  03.0
01EC:  GOTO   1F3
01ED:  INCF   79,F
01EE:  BTFSS  03.2
01EF:  GOTO   1F3
01F0:  INCF   78,F
01F1:  BTFSC  03.2
01F2:  BSF    3C.7
01F3:  MOVF   39,W
01F4:  ADDWF  79,F
01F5:  BTFSS  03.0
01F6:  GOTO   1FA
01F7:  INCF   78,F
01F8:  BTFSC  03.2
01F9:  BSF    3C.7
01FA:  MOVF   38,W
01FB:  MOVWF  35
01FC:  BSF    35.7
01FD:  MOVF   35,W
01FE:  ADDWF  78,F
01FF:  BTFSC  03.0
0200:  BSF    3C.7
0201:  RLF    3C,F
0202:  RRF    78,F
0203:  RRF    79,F
0204:  RRF    7A,F
0205:  RRF    3F,F
0206:  RRF    3E,F
0207:  RRF    3D,F
0208:  BCF    03.0
0209:  DECFSZ 3B,F
020A:  GOTO   1E6
020B:  MOVLW  01
020C:  ADDWF  77,F
020D:  BTFSC  03.0
020E:  GOTO   233
020F:  BTFSC  78.7
0210:  GOTO   218
0211:  RLF    3F,F
0212:  RLF    7A,F
0213:  RLF    79,F
0214:  RLF    78,F
0215:  DECF   77,F
0216:  BTFSC  03.2
0217:  GOTO   233
0218:  BTFSS  3F.7
0219:  GOTO   229
021A:  INCF   7A,F
021B:  BTFSS  03.2
021C:  GOTO   229
021D:  INCF   79,F
021E:  BTFSS  03.2
021F:  GOTO   229
0220:  INCF   78,F
0221:  BTFSS  03.2
0222:  GOTO   229
0223:  RRF    78,F
0224:  RRF    79,F
0225:  RRF    7A,F
0226:  INCF   77,F
0227:  BTFSC  03.2
0228:  GOTO   233
0229:  MOVF   34,W
022A:  MOVWF  3C
022B:  MOVF   38,W
022C:  XORWF  3C,F
022D:  BTFSS  3C.7
022E:  GOTO   231
022F:  BSF    78.7
0230:  GOTO   237
0231:  BCF    78.7
0232:  GOTO   237
0233:  CLRF   77
0234:  CLRF   78
0235:  CLRF   79
0236:  CLRF   7A
0237:  RETURN
0238:  BTFSC  03.1
0239:  GOTO   23D
023A:  MOVLW  3B
023B:  MOVWF  04
023C:  BCF    03.7
023D:  CLRF   77
023E:  CLRF   78
023F:  CLRF   79
0240:  CLRF   7A
0241:  CLRF   3B
0242:  CLRF   3C
0243:  CLRF   3D
0244:  CLRF   3E
0245:  MOVF   3A,W
0246:  IORWF  39,W
0247:  IORWF  38,W
0248:  IORWF  37,W
0249:  BTFSC  03.2
024A:  GOTO   27B
024B:  MOVLW  20
024C:  MOVWF  3F
024D:  BCF    03.0
024E:  RLF    33,F
024F:  RLF    34,F
0250:  RLF    35,F
0251:  RLF    36,F
0252:  RLF    3B,F
0253:  RLF    3C,F
0254:  RLF    3D,F
0255:  RLF    3E,F
0256:  MOVF   3A,W
0257:  SUBWF  3E,W
0258:  BTFSS  03.2
0259:  GOTO   264
025A:  MOVF   39,W
025B:  SUBWF  3D,W
025C:  BTFSS  03.2
025D:  GOTO   264
025E:  MOVF   38,W
025F:  SUBWF  3C,W
0260:  BTFSS  03.2
0261:  GOTO   264
0262:  MOVF   37,W
0263:  SUBWF  3B,W
0264:  BTFSS  03.0
0265:  GOTO   275
0266:  MOVF   37,W
0267:  SUBWF  3B,F
0268:  MOVF   38,W
0269:  BTFSS  03.0
026A:  INCFSZ 38,W
026B:  SUBWF  3C,F
026C:  MOVF   39,W
026D:  BTFSS  03.0
026E:  INCFSZ 39,W
026F:  SUBWF  3D,F
0270:  MOVF   3A,W
0271:  BTFSS  03.0
0272:  INCFSZ 3A,W
0273:  SUBWF  3E,F
0274:  BSF    03.0
0275:  RLF    77,F
0276:  RLF    78,F
0277:  RLF    79,F
0278:  RLF    7A,F
0279:  DECFSZ 3F,F
027A:  GOTO   24D
027B:  MOVF   3B,W
027C:  MOVWF  00
027D:  INCF   04,F
027E:  MOVF   3C,W
027F:  MOVWF  00
0280:  INCF   04,F
0281:  MOVF   3D,W
0282:  MOVWF  00
0283:  INCF   04,F
0284:  MOVF   3E,W
0285:  MOVWF  00
0286:  RETURN
0287:  MOVF   04,W
0288:  MOVWF  2B
0289:  MOVF   2A,W
028A:  MOVWF  2D
028B:  BTFSC  03.2
028C:  GOTO   2A6
028D:  MOVF   29,W
028E:  MOVWF  36
028F:  MOVF   28,W
0290:  MOVWF  35
0291:  MOVF   27,W
0292:  MOVWF  34
0293:  MOVF   26,W
0294:  MOVWF  33
0295:  CLRF   3A
0296:  CLRF   39
0297:  MOVLW  20
0298:  MOVWF  38
0299:  MOVLW  82
029A:  MOVWF  37
029B:  CALL   1C3
029C:  MOVF   7A,W
029D:  MOVWF  29
029E:  MOVF   79,W
029F:  MOVWF  28
02A0:  MOVF   78,W
02A1:  MOVWF  27
02A2:  MOVF   77,W
02A3:  MOVWF  26
02A4:  DECFSZ 2D,F
02A5:  GOTO   28D
02A6:  MOVF   29,W
02A7:  MOVWF  36
02A8:  MOVF   28,W
02A9:  MOVWF  35
02AA:  MOVF   27,W
02AB:  MOVWF  34
02AC:  MOVF   26,W
02AD:  MOVWF  33
02AE:  MOVF   33,W
02AF:  SUBLW  B6
02B0:  MOVWF  33
02B1:  CLRF   7A
02B2:  MOVF   34,W
02B3:  MOVWF  37
02B4:  BSF    34.7
02B5:  BCF    03.0
02B6:  RRF    34,F
02B7:  RRF    35,F
02B8:  RRF    36,F
02B9:  RRF    7A,F
02BA:  RRF    79,F
02BB:  RRF    78,F
02BC:  RRF    77,F
02BD:  DECFSZ 33,F
02BE:  GOTO   2B5
02BF:  BTFSS  37.7
02C0:  GOTO   2CC
02C1:  COMF   77,F
02C2:  COMF   78,F
02C3:  COMF   79,F
02C4:  COMF   7A,F
02C5:  INCF   77,F
02C6:  BTFSC  03.2
02C7:  INCF   78,F
02C8:  BTFSC  03.2
02C9:  INCF   79,F
02CA:  BTFSC  03.2
02CB:  INCF   7A,F
02CC:  MOVF   7A,W
02CD:  MOVWF  29
02CE:  MOVF   79,W
02CF:  MOVWF  28
02D0:  MOVF   78,W
02D1:  MOVWF  27
02D2:  MOVF   77,W
02D3:  MOVWF  26
02D4:  BTFSS  29.7
02D5:  GOTO   2E3
02D6:  DECF   2B,F
02D7:  BSF    2B.5
02D8:  COMF   26,F
02D9:  COMF   27,F
02DA:  COMF   28,F
02DB:  COMF   29,F
02DC:  INCF   26,F
02DD:  BTFSC  03.2
02DE:  INCF   27,F
02DF:  BTFSC  03.2
02E0:  INCF   28,F
02E1:  BTFSC  03.2
02E2:  INCF   29,F
02E3:  MOVLW  3B
02E4:  MOVWF  32
02E5:  MOVLW  9A
02E6:  MOVWF  31
02E7:  MOVLW  CA
02E8:  MOVWF  30
02E9:  CLRF   2F
02EA:  MOVLW  0A
02EB:  MOVWF  2D
02EC:  MOVF   2A,W
02ED:  BTFSC  03.2
02EE:  INCF   2B,F
02EF:  BSF    03.1
02F0:  MOVLW  26
02F1:  MOVWF  04
02F2:  BCF    03.7
02F3:  MOVF   29,W
02F4:  MOVWF  36
02F5:  MOVF   28,W
02F6:  MOVWF  35
02F7:  MOVF   27,W
02F8:  MOVWF  34
02F9:  MOVF   26,W
02FA:  MOVWF  33
02FB:  MOVF   32,W
02FC:  MOVWF  3A
02FD:  MOVF   31,W
02FE:  MOVWF  39
02FF:  MOVF   30,W
0300:  MOVWF  38
0301:  MOVF   2F,W
0302:  MOVWF  37
0303:  CALL   238
0304:  MOVF   78,W
0305:  MOVF   77,F
0306:  BTFSS  03.2
0307:  GOTO   31B
0308:  INCF   2A,W
0309:  SUBWF  2D,W
030A:  BTFSC  03.2
030B:  GOTO   31B
030C:  MOVF   2B,W
030D:  BTFSC  03.2
030E:  GOTO   31D
030F:  ANDLW  0F
0310:  SUBWF  2D,W
0311:  BTFSC  03.2
0312:  GOTO   315
0313:  BTFSC  03.0
0314:  GOTO   34D
0315:  BTFSC  2B.7
0316:  GOTO   34D
0317:  BTFSC  2B.6
0318:  GOTO   31D
0319:  MOVLW  20
031A:  GOTO   349
031B:  MOVLW  20
031C:  ANDWF  2B,F
031D:  BTFSS  2B.5
031E:  GOTO   32B
031F:  BCF    2B.5
0320:  MOVF   2A,W
0321:  BTFSS  03.2
0322:  DECF   2B,F
0323:  MOVF   77,W
0324:  MOVWF  2B
0325:  MOVLW  2D
0326:  MOVWF  33
0327:  CALL   13F
0328:  MOVF   2B,W
0329:  MOVWF  77
032A:  CLRF   2B
032B:  MOVF   2A,W
032C:  SUBWF  2D,W
032D:  BTFSS  03.2
032E:  GOTO   339
032F:  MOVF   77,W
0330:  MOVWF  2B
0331:  MOVLW  2E
0332:  MOVWF  33
0333:  CALL   13F
0334:  MOVF   2B,W
0335:  MOVWF  77
0336:  MOVLW  20
0337:  ANDWF  2B,F
0338:  MOVLW  00
0339:  MOVLW  30
033A:  BTFSS  2B.5
033B:  GOTO   349
033C:  BCF    2B.5
033D:  MOVF   2A,W
033E:  BTFSS  03.2
033F:  DECF   2B,F
0340:  MOVF   77,W
0341:  MOVWF  2B
0342:  MOVLW  2D
0343:  MOVWF  33
0344:  CALL   13F
0345:  MOVF   2B,W
0346:  MOVWF  77
0347:  CLRF   2B
0348:  MOVLW  30
0349:  ADDWF  77,F
034A:  MOVF   77,W
034B:  MOVWF  33
034C:  CALL   13F
034D:  BCF    03.1
034E:  MOVF   32,W
034F:  MOVWF  36
0350:  MOVF   31,W
0351:  MOVWF  35
0352:  MOVF   30,W
0353:  MOVWF  34
0354:  MOVF   2F,W
0355:  MOVWF  33
0356:  CLRF   3A
0357:  CLRF   39
0358:  CLRF   38
0359:  MOVLW  0A
035A:  MOVWF  37
035B:  CALL   238
035C:  MOVF   7A,W
035D:  MOVWF  32
035E:  MOVF   79,W
035F:  MOVWF  31
0360:  MOVF   78,W
0361:  MOVWF  30
0362:  MOVF   77,W
0363:  MOVWF  2F
0364:  DECFSZ 2D,F
0365:  GOTO   2EF
0366:  BCF    0A.3
0367:  BCF    0A.4
0368:  GOTO   457 (RETURN)
*
0395:  MOVLW  10
0396:  MOVWF  2C
0397:  CLRF   77
0398:  CLRF   7A
0399:  RRF    29,F
039A:  RRF    28,F
039B:  BTFSS  03.0
039C:  GOTO   3A3
039D:  MOVF   2A,W
039E:  ADDWF  77,F
039F:  BTFSC  03.0
03A0:  INCF   7A,F
03A1:  MOVF   2B,W
03A2:  ADDWF  7A,F
03A3:  RRF    7A,F
03A4:  RRF    77,F
03A5:  RRF    79,F
03A6:  RRF    78,F
03A7:  DECFSZ 2C,F
03A8:  GOTO   399
*
03B1:  MOVLW  8E
03B2:  MOVWF  77
03B3:  MOVF   29,W
03B4:  MOVWF  78
03B5:  MOVF   28,W
03B6:  MOVWF  79
03B7:  CLRF   7A
03B8:  MOVF   78,F
03B9:  BTFSS  03.2
03BA:  GOTO   3C5
03BB:  MOVF   79,W
03BC:  MOVWF  78
03BD:  CLRF   79
03BE:  MOVLW  08
03BF:  SUBWF  77,F
03C0:  MOVF   78,F
03C1:  BTFSS  03.2
03C2:  GOTO   3C5
03C3:  CLRF   77
03C4:  GOTO   3CD
03C5:  BCF    03.0
03C6:  BTFSC  78.7
03C7:  GOTO   3CC
03C8:  RLF    79,F
03C9:  RLF    78,F
03CA:  DECF   77,F
03CB:  GOTO   3C5
03CC:  BCF    78.7
*
03F4:  MOVF   0B,W
03F5:  MOVWF  27
03F6:  BCF    0B.7
03F7:  BSF    03.5
03F8:  BSF    03.6
03F9:  BSF    0C.7
03FA:  BSF    0C.0
03FB:  NOP
03FC:  NOP
03FD:  BCF    03.5
03FE:  BCF    03.6
03FF:  BTFSC  27.7
0400:  BSF    0B.7
0401:  BTFSC  03.0
0402:  GOTO   42B
0403:  BSF    03.6
0404:  MOVF   0C,W
0405:  ANDLW  7F
0406:  BCF    03.6
0407:  MOVWF  27
0408:  BSF    03.6
0409:  MOVF   0D,W
040A:  BCF    03.6
040B:  MOVWF  28
040C:  BSF    03.6
040D:  MOVF   0F,W
040E:  BCF    03.6
040F:  MOVWF  29
0410:  MOVF   27,W
0411:  MOVWF  33
0412:  CALL   13F
0413:  MOVF   28,W
0414:  BSF    03.6
0415:  MOVWF  0D
0416:  BCF    03.6
0417:  MOVF   29,W
0418:  BSF    03.6
0419:  MOVWF  0F
041A:  BCF    03.6
041B:  MOVF   0B,W
041C:  MOVWF  2A
041D:  BCF    0B.7
041E:  BSF    03.5
041F:  BSF    03.6
0420:  BSF    0C.7
0421:  BSF    0C.0
0422:  NOP
0423:  NOP
0424:  BCF    03.5
0425:  BCF    03.6
0426:  BTFSC  2A.7
0427:  BSF    0B.7
0428:  DECFSZ 26,F
0429:  GOTO   42B
042A:  GOTO   44A
042B:  BSF    03.6
042C:  RLF    0C,W
042D:  RLF    0E,W
042E:  ANDLW  7F
042F:  BCF    03.6
0430:  MOVWF  27
0431:  BSF    03.6
0432:  MOVF   0D,W
0433:  BCF    03.6
0434:  MOVWF  28
0435:  BSF    03.6
0436:  MOVF   0F,W
0437:  BCF    03.6
0438:  MOVWF  29
0439:  MOVF   27,W
043A:  MOVWF  33
043B:  CALL   13F
043C:  MOVF   28,W
043D:  BSF    03.6
043E:  MOVWF  0D
043F:  BCF    03.6
0440:  MOVF   29,W
0441:  BSF    03.6
0442:  MOVWF  0F
0443:  INCF   0D,F
0444:  BTFSC  03.2
0445:  INCF   0F,F
0446:  BCF    03.0
0447:  BCF    03.6
0448:  DECFSZ 26,F
0449:  GOTO   3F4
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,PUT,NOPROTECT 
.................... #use delay(clock=48M) 
*
0012:  MOVLW  34
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  0F
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  8F
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  NOP
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008F:  BSF    06.3
....................    output_float(LCD_DATA5); 
0090:  BSF    06.4
....................    output_float(LCD_DATA6); 
0091:  BSF    06.5
....................    output_float(LCD_DATA7); 
0092:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0093:  BCF    03.5
0094:  BSF    06.1
0095:  BSF    03.5
0096:  BCF    06.1
....................    delay_cycles(1); 
0097:  NOP
....................    lcd_output_enable(1); 
0098:  BCF    03.5
0099:  BSF    06.2
009A:  BSF    03.5
009B:  BCF    06.2
....................    delay_cycles(1); 
009C:  NOP
....................    high = lcd_read_nibble(); 
009D:  BCF    03.5
009E:  CALL   056
009F:  MOVF   78,W
00A0:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
00A1:  BCF    06.2
00A2:  BSF    03.5
00A3:  BCF    06.2
....................    delay_cycles(1); 
00A4:  NOP
....................    lcd_output_enable(1); 
00A5:  BCF    03.5
00A6:  BSF    06.2
00A7:  BSF    03.5
00A8:  BCF    06.2
....................    delay_us(1); 
00A9:  MOVLW  03
00AA:  MOVWF  77
00AB:  DECFSZ 77,F
00AC:  GOTO   0AB
00AD:  GOTO   0AE
....................    low = lcd_read_nibble(); 
00AE:  BCF    03.5
00AF:  CALL   056
00B0:  MOVF   78,W
00B1:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    06.2
00B3:  BSF    03.5
00B4:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B5:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00B6:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00B7:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00B8:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B9:  BCF    03.5
00BA:  SWAPF  3B,W
00BB:  MOVWF  77
00BC:  MOVLW  F0
00BD:  ANDWF  77,F
00BE:  MOVF   77,W
00BF:  IORWF  3A,W
00C0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0056:  CLRF   3C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0057:  BSF    03.5
0058:  BSF    06.3
0059:  MOVLW  00
005A:  BCF    03.5
005B:  BTFSC  06.3
005C:  MOVLW  01
005D:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1; 
005E:  BSF    03.5
005F:  BSF    06.4
0060:  MOVLW  00
0061:  BCF    03.5
0062:  BTFSC  06.4
0063:  MOVLW  01
0064:  MOVWF  77
0065:  BCF    03.0
0066:  RLF    77,F
0067:  MOVF   77,W
0068:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2; 
0069:  BSF    03.5
006A:  BSF    06.5
006B:  MOVLW  00
006C:  BCF    03.5
006D:  BTFSC  06.5
006E:  MOVLW  01
006F:  MOVWF  77
0070:  RLF    77,F
0071:  RLF    77,F
0072:  MOVLW  FC
0073:  ANDWF  77,F
0074:  MOVF   77,W
0075:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3; 
0076:  BSF    03.5
0077:  BSF    06.6
0078:  MOVLW  00
0079:  BCF    03.5
007A:  BTFSC  06.6
007B:  MOVLW  01
007C:  MOVWF  77
007D:  RLF    77,F
007E:  RLF    77,F
007F:  RLF    77,F
0080:  MOVLW  F8
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORWF  3C,F
....................     
....................    return(n); 
0084:  MOVF   3C,W
0085:  MOVWF  78
....................   #else 
0086:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0027:  BTFSC  3B.0
0028:  GOTO   02B
0029:  BCF    06.3
002A:  GOTO   02C
002B:  BSF    06.3
002C:  BSF    03.5
002D:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002E:  BCF    03.5
002F:  BTFSC  3B.1
0030:  GOTO   033
0031:  BCF    06.4
0032:  GOTO   034
0033:  BSF    06.4
0034:  BSF    03.5
0035:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0036:  BCF    03.5
0037:  BTFSC  3B.2
0038:  GOTO   03B
0039:  BCF    06.5
003A:  GOTO   03C
003B:  BSF    06.5
003C:  BSF    03.5
003D:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003E:  BCF    03.5
003F:  BTFSC  3B.3
0040:  GOTO   043
0041:  BCF    06.6
0042:  GOTO   044
0043:  BSF    06.6
0044:  BSF    03.5
0045:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BCF    03.5
0048:  BSF    06.2
0049:  BSF    03.5
004A:  BCF    06.2
....................    delay_us(2); 
004B:  MOVLW  07
004C:  MOVWF  77
004D:  DECFSZ 77,F
004E:  GOTO   04D
004F:  GOTO   050
....................    lcd_output_enable(0); 
0050:  BCF    03.5
0051:  BCF    06.2
0052:  BSF    03.5
0053:  BCF    06.2
0054:  BCF    03.5
0055:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0087:  BSF    03.5
0088:  BCF    06.2
....................    lcd_rs_tris(); 
0089:  BCF    06.0
....................    lcd_rw_tris(); 
008A:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008B:  BCF    03.5
008C:  BCF    06.0
008D:  BSF    03.5
008E:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C1:  MOVF   78,W
00C2:  MOVWF  3A
00C3:  BTFSS  3A.7
00C4:  GOTO   0C7
00C5:  BSF    03.5
00C6:  GOTO   08F
....................    lcd_output_rs(address); 
00C7:  MOVF   38,F
00C8:  BTFSS  03.2
00C9:  GOTO   0CC
00CA:  BCF    06.0
00CB:  GOTO   0CD
00CC:  BSF    06.0
00CD:  BSF    03.5
00CE:  BCF    06.0
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_rw(0); 
00D0:  BCF    03.5
00D1:  BCF    06.1
00D2:  BSF    03.5
00D3:  BCF    06.1
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  BCF    03.5
00D6:  BCF    06.2
00D7:  BSF    03.5
00D8:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00D9:  BCF    03.5
00DA:  SWAPF  39,W
00DB:  MOVWF  3A
00DC:  MOVLW  0F
00DD:  ANDWF  3A,F
00DE:  MOVF   3A,W
00DF:  MOVWF  3B
00E0:  CALL   027
....................    lcd_send_nibble(n & 0xf); 
00E1:  MOVF   39,W
00E2:  ANDLW  0F
00E3:  MOVWF  3A
00E4:  MOVWF  3B
00E5:  CALL   027
00E6:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E7:  MOVLW  28
00E8:  MOVWF  27
00E9:  MOVLW  0C
00EA:  MOVWF  28
00EB:  MOVLW  01
00EC:  MOVWF  29
00ED:  MOVLW  06
00EE:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EF:  BCF    06.2
00F0:  BSF    03.5
00F1:  BCF    06.2
....................    lcd_output_rs(0); 
00F2:  BCF    03.5
00F3:  BCF    06.0
00F4:  BSF    03.5
00F5:  BCF    06.0
....................    lcd_output_rw(0); 
00F6:  BCF    03.5
00F7:  BCF    06.1
00F8:  BSF    03.5
00F9:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FA:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00FB:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00FC:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00FD:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FE:  BCF    06.2
....................    lcd_rs_tris(); 
00FF:  BCF    06.0
....................    lcd_rw_tris(); 
0100:  BCF    06.1
....................  #endif 
....................      
....................    delay_ms(15); 
0101:  MOVLW  0F
0102:  BCF    03.5
0103:  MOVWF  34
0104:  CALL   012
....................    for(i=1;i<=3;++i) 
0105:  MOVLW  01
0106:  MOVWF  26
0107:  MOVF   26,W
0108:  SUBLW  03
0109:  BTFSS  03.0
010A:  GOTO   113
....................    { 
....................        lcd_send_nibble(3); 
010B:  MOVLW  03
010C:  MOVWF  3B
010D:  CALL   027
....................        delay_ms(5); 
010E:  MOVLW  05
010F:  MOVWF  34
0110:  CALL   012
0111:  INCF   26,F
0112:  GOTO   107
....................    } 
....................     
....................    lcd_send_nibble(2); 
0113:  MOVLW  02
0114:  MOVWF  3B
0115:  CALL   027
....................    delay_ms(5); 
0116:  MOVLW  05
0117:  MOVWF  34
0118:  CALL   012
....................    for(i=0;i<=3;++i) 
0119:  CLRF   26
011A:  MOVF   26,W
011B:  SUBLW  03
011C:  BTFSS  03.0
011D:  GOTO   12A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011E:  MOVLW  27
011F:  ADDWF  26,W
0120:  MOVWF  04
0121:  BCF    03.7
0122:  MOVF   00,W
0123:  MOVWF  2B
0124:  CLRF   38
0125:  MOVF   2B,W
0126:  MOVWF  39
0127:  CALL   087
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0128:  INCF   26,F
0129:  GOTO   11A
012A:  BCF    0A.3
012B:  BCF    0A.4
012C:  GOTO   479 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
012D:  DECFSZ 35,W
012E:  GOTO   130
012F:  GOTO   133
....................       address=LCD_LINE_TWO; 
0130:  MOVLW  40
0131:  MOVWF  36
0132:  GOTO   134
....................    else 
....................       address=0; 
0133:  CLRF   36
....................       
....................    address+=x-1; 
0134:  MOVLW  01
0135:  SUBWF  34,W
0136:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0137:  MOVF   36,W
0138:  IORLW  80
0139:  MOVWF  37
013A:  CLRF   38
013B:  MOVF   37,W
013C:  MOVWF  39
013D:  CALL   087
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013E:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
013F:  MOVF   33,W
0140:  XORLW  07
0141:  BTFSC  03.2
0142:  GOTO   14D
0143:  XORLW  0B
0144:  BTFSC  03.2
0145:  GOTO   152
0146:  XORLW  06
0147:  BTFSC  03.2
0148:  GOTO   15A
0149:  XORLW  02
014A:  BTFSC  03.2
014B:  GOTO   160
014C:  GOTO   165
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
014D:  MOVLW  01
014E:  MOVWF  34
014F:  MOVWF  35
0150:  CALL   12D
0151:  GOTO   16A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0152:  CLRF   38
0153:  MOVLW  01
0154:  MOVWF  39
0155:  CALL   087
....................                      delay_ms(2); 
0156:  MOVLW  02
0157:  MOVWF  34
0158:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0159:  GOTO   16A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
015A:  MOVLW  01
015B:  MOVWF  34
015C:  MOVLW  02
015D:  MOVWF  35
015E:  CALL   12D
015F:  GOTO   16A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0160:  CLRF   38
0161:  MOVLW  10
0162:  MOVWF  39
0163:  CALL   087
0164:  GOTO   16A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0165:  MOVLW  01
0166:  MOVWF  38
0167:  MOVF   33,W
0168:  MOVWF  39
0169:  CALL   087
....................      #endif 
....................    } 
016A:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define trigger PIN_A0 
.................... #define echo PIN_A1 
....................  
.................... #use standard_io (a) 
....................  
....................  
....................  
....................  
....................  
....................   
....................  
....................  
.................... void mide_distancia(void); 
....................  
.................... long tiempo_eco=0;  //tiempo que dura el eco 
.................... float  distancia=0;   //distancia en cm 
....................  
....................  
.................... void main() { 
*
0466:  MOVF   03,W
0467:  ANDLW  1F
0468:  MOVWF  03
0469:  CLRF   21
046A:  CLRF   20
046B:  CLRF   25
046C:  CLRF   24
046D:  CLRF   23
046E:  CLRF   22
046F:  BSF    03.5
0470:  BSF    1F.0
0471:  BSF    1F.1
0472:  BSF    1F.2
0473:  BCF    1F.3
0474:  MOVLW  07
0475:  MOVWF  1C
0476:  BCF    03.7
....................  
....................  
....................   lcd_init();                  
0477:  BCF    03.5
0478:  GOTO   0E7
....................   printf(lcd_putc,"Ultrasonico"); 
0479:  MOVLW  04
047A:  BSF    03.6
047B:  MOVWF  0D
047C:  MOVLW  00
047D:  MOVWF  0F
047E:  BCF    03.6
047F:  GOTO   16B
....................   delay_ms(500); 
0480:  MOVLW  02
0481:  MOVWF  26
0482:  MOVLW  FA
0483:  MOVWF  34
0484:  CALL   012
0485:  DECFSZ 26,F
0486:  GOTO   482
....................   printf(lcd_putc,"\f"); 
0487:  MOVLW  0C
0488:  MOVWF  33
0489:  CALL   13F
....................    
....................   setup_timer_1(T1_INTERNAL | T1_DIV_BY_8 ); 
048A:  MOVLW  B5
048B:  MOVWF  10
....................   set_timer1(0); 
048C:  CLRF   0E
048D:  CLRF   0F
048E:  CLRF   0E
....................   
....................   while(TRUE) { 
....................    
....................     delay_ms(200); 
048F:  MOVLW  C8
0490:  MOVWF  34
0491:  CALL   012
....................      
....................     mide_distancia(); 
0492:  GOTO   369
0493:  GOTO   48F
....................      
....................      
....................    } 
....................     
....................     
....................     
.................... } 
....................  
0494:  SLEEP
.................... void mide_distancia(void) 
.................... { 
....................    output_high(Trigger);         // pulso de disparo 
*
0369:  BSF    03.5
036A:  BCF    05.0
036B:  BCF    03.5
036C:  BSF    05.0
....................    delay_us(10);                 //Esperamos 10 us 
036D:  MOVLW  27
036E:  MOVWF  77
036F:  DECFSZ 77,F
0370:  GOTO   36F
0371:  GOTO   372
....................    output_low(Trigger);          //Apagamos el pulso 
0372:  BSF    03.5
0373:  BCF    05.0
0374:  BCF    03.5
0375:  BCF    05.0
....................    while(!input_state(Echo)){ 
0376:  BTFSS  05.1
0377:  GOTO   376
....................    }                             //espera flanco de subida 
....................    set_timer1(0);                //Iniciamos el timer1 
0378:  CLRF   0E
0379:  CLRF   0F
037A:  CLRF   0E
....................    while(input_state(Echo)){ 
037B:  BTFSC  05.1
037C:  GOTO   37B
....................    }                             //esperamos flanco de bajada 
....................    tiempo_eco = get_timer1();//Leemos el valor del timer1 
037D:  MOVF   0F,W
037E:  MOVWF  7A
037F:  MOVF   0E,W
0380:  MOVWF  77
0381:  MOVF   0F,W
0382:  SUBWF  7A,W
0383:  BTFSS  03.2
0384:  GOTO   37D
0385:  MOVF   77,W
0386:  MOVWF  20
0387:  MOVF   7A,W
0388:  MOVWF  21
....................    distancia = (tiempo_eco/2)*34*.000666; //Convertimos a distancia //tiempo = (4/Fosc)*prescaler = (4/48M)*8 = 0.000666 ms 
0389:  BCF    03.0
038A:  RRF    21,W
038B:  MOVWF  27
038C:  RRF    20,W
038D:  MOVWF  26
038E:  MOVF   27,W
038F:  MOVWF  29
0390:  MOVF   26,W
0391:  MOVWF  28
0392:  CLRF   2B
0393:  MOVLW  22
0394:  MOVWF  2A
*
03A9:  MOVF   79,W
03AA:  MOVWF  27
03AB:  MOVF   78,W
03AC:  MOVWF  26
03AD:  MOVF   27,W
03AE:  MOVWF  29
03AF:  MOVF   26,W
03B0:  MOVWF  28
*
03CD:  MOVF   7A,W
03CE:  MOVWF  36
03CF:  MOVF   79,W
03D0:  MOVWF  35
03D1:  MOVF   78,W
03D2:  MOVWF  34
03D3:  MOVF   77,W
03D4:  MOVWF  33
03D5:  MOVLW  81
03D6:  MOVWF  3A
03D7:  MOVLW  96
03D8:  MOVWF  39
03D9:  MOVLW  2E
03DA:  MOVWF  38
03DB:  MOVLW  74
03DC:  MOVWF  37
03DD:  CALL   1C3
03DE:  MOVF   7A,W
03DF:  MOVWF  25
03E0:  MOVF   79,W
03E1:  MOVWF  24
03E2:  MOVF   78,W
03E3:  MOVWF  23
03E4:  MOVF   77,W
03E5:  MOVWF  22
....................    lcd_gotoxy(1,2);              //Cursor en la posicion columna 1 fila 2 
03E6:  MOVLW  01
03E7:  MOVWF  34
03E8:  MOVLW  02
03E9:  MOVWF  35
03EA:  CALL   12D
....................    printf(lcd_putc,"\nDist: %1.2f cm", distancia); //Imprimimos la distancia 
03EB:  MOVLW  0A
03EC:  BSF    03.6
03ED:  MOVWF  0D
03EE:  MOVLW  00
03EF:  MOVWF  0F
03F0:  BCF    03.0
03F1:  MOVLW  07
03F2:  BCF    03.6
03F3:  MOVWF  26
*
044A:  MOVLW  89
044B:  MOVWF  04
044C:  MOVF   25,W
044D:  MOVWF  29
044E:  MOVF   24,W
044F:  MOVWF  28
0450:  MOVF   23,W
0451:  MOVWF  27
0452:  MOVF   22,W
0453:  MOVWF  26
0454:  MOVLW  02
0455:  MOVWF  2A
0456:  GOTO   287
0457:  MOVLW  20
0458:  MOVWF  33
0459:  CALL   13F
045A:  MOVLW  63
045B:  MOVWF  33
045C:  CALL   13F
045D:  MOVLW  6D
045E:  MOVWF  33
045F:  CALL   13F
....................    delay_ms(200);                //Esperamos 200ms 
0460:  MOVLW  C8
0461:  MOVWF  34
0462:  CALL   012
0463:  BCF    0A.3
0464:  BCF    0A.4
0465:  GOTO   493 (RETURN)
....................     
....................     
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
